https://www.youtube.com/watch?v=8uiZC0l4Ajw&list=PLmPL-f-MSjiJH6X5K0Li1VTZxkE3y4DCc&index=12


https://pkg.go.dev/
gofmt -w yourfile.go >>to format your code(for better readability)

go mod init go_tutotrials

Compiling means:

Translating your human-readable Go code (.go files) into a binary (machine code) that your computer can execute.
This is done by the Go compiler (go build, go run uses it behind the scenes).
Compiler responsibilities:
Checks your code for syntax, type, and logical errors.

Translates your code into machine-executable form (a binary).

Performs optimizations for performance.

Once compilation succeeds, the binary is passed to the runtime to execute

Runtime refers to:

The period when the compiled program is actually running (being executed by the CPU).

Go’s runtime system handles:

Goroutine scheduling

Garbage collection (memory management)

Stack growth

Panic/recover behavior

Maps, slices, channels
Go panics on many runtime errors — you can recover using defer + recover().

A panic in Go is when something goes wrong at runtime and the program immediately stops normal execution.

What is recover()?
recover() is a built-in function that lets you catch a panic and stop it from crashing the program.

But — you can only use recover() inside a defer function.




by google .
g0 -complied
go> interpreted,dynamically typed(python) + efficiency and safety of statically
typed,complied(c++)
- network,multi core computing,concurrency
server side,backend
compliles into single binary>>go build hello.go

modularization
============
go mod init myproject

go>>indentation does NOT matter,but indent to look good

data types
=======
int ,int8 ,int16 etc
float
string ,"string"
bool,true ,false


static typed
=====
data types used incorrectly throws error,c++ ,java 
better proerfomance,bugs can be caught by complier,better data integirty

dynamically typed(weekly,loosely typed)
=======
complier does not enforce data types,python,javascript 
faster to write code,less rigid

variables
=========
statically types

var s string = "hello"
or 
s:= "hello"

var i int = 100



go mod init myproject


Use **fmt.Printf** when you want to use format specifiers like %v (value) and %T (type).

**fmt.Println** just prints values with a space and newline, without interpreting format specifiers.


var grades [3] int = [3] int {10,20,30}
or 
grades := [3] int {10,20,30}


:= → Declare + Assign
func main() {
	name := "Narendra" // declares 'name' and assigns value
	age := 24           // declares 'age' and assigns value
	fmt.Println(name, age)
}


= → Just Assign
func main() {
	name := "Narendra"
	name = "Naren" // reassigns existing variable
	fmt.Println(name)
}


... (ellipsis) in Go
➤ Meaning: It has two main uses
1️⃣ When passing variadic parameters
func greet(names ...string) {
	for _, name := range names {
		fmt.Println("Hello", name)
	}
}

func main() {
	greet("Alice", "Bob", "Charlie")
}
Here, names ...string means you can pass any number of strings, like an array.

2️⃣ When expanding a slice into arguments
func sum(nums ...int) {
	total := 0
	for _, n := range nums {
		total += n
	}
	fmt.Println("Total:", total)
}

func main() {
	numbers := []int{1, 2, 3, 4}
	sum(numbers...) // '...' expands the slice into individual arguments
}


A higher-order function is a function that takes another function as an argument or returns a function.

str := "Hello, World" // valid string
char := 'A'           // valid rune (int32)
Go: double quotes for strings, single quotes for characters/runes.

Python: either works for strings.


How range works with a map in Go:
In Go, range is used in a for loop to iterate over elements in various data structures like slices, arrays, strings, and maps.

When you use range on a map, it gives you keys (by default), or both key and value if you ask for them.


goroutines
===============

What is sync.WaitGroup?
A WaitGroup is a synchronization primitive in Go that:

Tracks goroutines that are running.

Blocks the main program until all tracked goroutines finish.

Uses a counter to know how many goroutines to wait for.
Key Methods:
Method	Purpose
wg.Add(n)	Increments the counter by n (number of goroutines to wait for).
wg.Done()	Decrements the counter by 1 (called when a goroutine finishes).
wg.Wait()	Blocks until the counter reaches 0.

Why defer is Important?
Ensures wg.Done() is called even if the goroutine panics or returns early.

Guarantees cleanup, similar to try-finally in other languages.

Execution Flow (Fixed):
wg.Add(2) → Counter = 2.

printLine1() → defer wg.Done() → Counter = 1 when it exits.

printLine2() → defer wg.Done() → Counter = 0 when it exits.

wg.Wait() now unblocks because counter reached 0.

sync.WaitGroup Explained
sync.WaitGroup is used to wait for a collection of goroutines to finish.

Key Methods:
wg.Add(int):

Increments the WaitGroup counter by the given value

Should be called before launching the goroutine

The number depends on how many goroutines you're going to launch

wg.Done():

Decrements the WaitGroup counter by 1

Typically called with defer at the start of the goroutine

Signals that the goroutine has completed

wg.Wait():

Blocks until the WaitGroup counter is zero

Called in the main goroutine to wait for others to finish


What defer wg.Done() does:
wg.Done(): This decrements the WaitGroup counter by 1, signaling that this goroutine has finished its work.

defer: This schedules wg.Done() to be called just before the goroutine exits (i.e., when the function returns).

Why use defer here?
Using defer is a best practice for WaitGroup.Done() because:

Guaranteed Execution: Even if the goroutine panics or has an early return (e.g., due to an error), defer ensures wg.Done() is called. Without defer, you might forget to call Done() in some code paths, causing the program to deadlock (since wg.Wait() would wait forever).

Cleaner Code: It keeps the Done() call right at the start of the goroutine (as a defer), making it clear that this goroutine will signal completion when it exits.

Yes, Goroutines can run in parallel if your Go program is running on a machine with multiple CPU cores (or vCPUs) and if you have properly configured your program to use them.

GOMAXPROCS:

Go uses an environment variable called GOMAXPROCS (default = number of CPU cores) to decide how many OS threads can execute goroutines simultaneously.

If GOMAXPROCS=1, goroutines run concurrently but not in parallel (single-threaded).

If GOMAXPROCS > 1 (e.g., GOMAXPROCS=8 on an 8-core machine), goroutines can run in parallel on multiple cores.

Key Points:
✅ By default, Go uses all available CPU cores (GOMAXPROCS = NumCPU).
✅ If you have 4+ cores, goroutines can execute in parallel (not just concurrently).
✅ You can manually set GOMAXPROCS (e.g., runtime.GOMAXPROCS(2)) to limit parallelism.
✅ The Go scheduler efficiently distributes goroutines across threads and cores.

How to Check Parallelism in Action:
Run a CPU-bound task (e.g., calculating primes) with multiple goroutines.

Monitor CPU usage (htop, top, or go tool trace) to see if multiple cores are utilized.

Yes, goroutines run in parallel if multiple cores are available (default behavior).

No extra configuration is needed (Go handles it automatically).

For I/O-bound tasks, goroutines are efficient even on a single core (due to non-blocking I/O).

For CPU-bound tasks, parallelism kicks in when GOMAXPROCS > 1.

Go (Goroutines) – Parallel Execution (Multi-Core)
Goroutines are lightweight threads managed by the Go runtime.

If you have multiple CPU cores, Go's scheduler distributes goroutines across cores, enabling true parallelism.

Default behavior: GOMAXPROCS = NumCPU (uses all available cores
	// Runs in parallel on multiple cores (CPU-bound work)
for i := 0; i < 8; i++ {
    go compute() // Each goroutine can run on a separate core
}

Python has a Global Interpreter Lock (GIL), which prevents multiple threads from executing Python bytecode simultaneously in the same process. This affects parallelism:

What is a Deadlock in Go?
A deadlock occurs when all goroutines in your program are blocked, waiting for something to happen, but nothing can proceed. In your case, the program has only one goroutine (the main goroutine), and it's stuck trying to send a value into an unbuffered channel.

Why Your Code Deadlocks
go
ch := make(chan int)  // Creates an unbuffered channel
ch <- 5               // This blocks until someone receives from the channel
fmt.Println(<-ch)     // This line never gets executed because the previous line blocks
How to Fix It
Solution 1: Use a Buffered Channel
go
ch := make(chan int, 1)  // Channel with buffer size 1
ch <- 5                  // This won't block because there's space in buffer
fmt.Println(<-ch)        // This receives the value
Solution 2: Use Separate Goroutines for Send and Receive
go
ch := make(chan int)

go func() {
    ch <- 5  // Send in a separate goroutine
}()

fmt.Println(<-ch)  // Receive in main goroutine
Solution 3: Send and Receive in the Right Order
go
ch := make(chan int)

go func() {
    fmt.Println(<-ch)  // Receive first
}()

ch <- 5  // Then send


What is -race?
The -race flag enables Go's race detector, a tool for finding race conditions in concurrent Go programs. When you run your code with go run -race or go test -race, the compiler instruments your code to detect potential data races during execution.

# For running a program
go run -race main.go

# For testing
go test -race ./...

# For building
go build -race

Performance Impact
The race detector:

Increases memory usage by 5-10x

Slows down execution by 2-20x

Should only be used during development/testing, not in production

$env:CGO_ENABLED = "1"
PS C:\Users\NAREN JATTI\OneDrive\Documents\kodekloud\golang> go env CGO_ENABLED   

What Are Channels?
Channels in Go are communication primitives that enable safe data exchange between goroutines. They are not exactly memory locations but rather a sophisticated synchronization mechanism built on top of memory.
Channel Implementation
Under the hood, channels are implemented as:

Circular queues (for buffered channels)

Synchronization primitives (mutexes, semaphores)

Send/receive queues to manage waiting goroutines
Real Value of Channels
Channels shine when coordinating:

Producer-Consumer patterns (like our restaurant)

Pipeline processing (output of one goroutine feeds another)

Fan-out/fan-in (multiple workers processing/sending to aggregator)

Event notification (signaling between goroutines)
Why the Restaurant Example Needs Channels
Concurrency Management:

Multiple waiters taking orders simultaneously

Multiple chefs preparing orders in parallel

Safe Communication:

No two chefs take the same order

Waiters don't need to know which chef gets the order

Backpressure Handling:

Waiters automatically slow down when kitchen is busy

Chefs always get orders in sequence

Clean Shutdown:

Closing the channel signals chefs to finish work

No orders get lost during shutdown

Alternative Without Channels
You could implement this with:

go
var (
    orders []Order
    mutex  sync.Mutex
    cond   = sync.NewCond(&mutex)
)
But you'd need to manually:

Lock before accessing the slice

Signal when new orders arrive

Handle all edge cases

Implement proper shutdown logic

Channels encapsulate all this complexity in a clean abstraction

[]int{2,3,4,5} → slice of ints.

[4]int{2,3,4,5} → array of 4 ints.

How to Check for Heap Allocations
Use go build -gcflags="-m" to see escape analysis: